# -*- coding: utf-8 -*-
"""
Created on Sat Aug 13 13:49:33 2022

@author: vixey foxwish
"""
# LeetCode problem 12. Integer to Roman. Difficulty Medium. Solved 8/14/2022
# LeetCode: Your runtime beats 82.32% of python3 solutions
# Python 3.8.10
# =============================================================================
# 
# Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
# 
# Symbol       Value
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# For example, 2 is written as II in Roman numeral, just two one's added together. 
# 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
# 
# Roman numerals are usually written largest to smallest from left to right. 
# However, the numeral for four is not IIII. Instead, the number four is written as IV.
# Because the one is before the five we subtract it making four. 
# The same principle applies to the number nine, which is written as IX. 
# There are six instances where subtraction is used:
# 
# I can be placed before V (5) and X (10) to make 4 and 9. 
# X can be placed before L (50) and C (100) to make 40 and 90. 
# C can be placed before D (500) and M (1000) to make 400 and 900.
# Given an integer, convert it to a roman numeral.
# 
# =============================================================================
class Solution:
    def intToRoman(self, num: int) -> str:
        first_place = ""
        second_place = ""
        second_to_last = ""
        last_place = ""
    # The output will later be the combination of these four strings (if present)   
    # Each corresponds to storing the value for one of up to four digits in the integer
        number = num
    # This number will be reused at progressively smaller values as leading digits are removed

        string_form = str(number)
    # This is the string of the number (different data type than integer)

        if len(string_form) == 4:
    # Four digit number starts with integer for the first position in the string form of the number
           thousands_place = int(string_form[0])
           
    # The first digit of the four digit string (repeat M as many times as needed)
           first_place = "M" * thousands_place
            
    # Treat the remainder as if it were its own three digit number      
           remainder = number - thousands_place*1000
                    
           # Consider special cases of numbers d00d, d0dd, and dd0d where d = digit
           # (If the final digit is a zero, that is only handled at the very end) 
           
    # What if number takes the form d00d (Thousands + one digit remainder)
           if string_form[1] == "0" and string_form[2] == "0":
                 number = remainder
           # This makes the new number just the final digit D of A00D -> D
                 string_form = string_form[-1]
           # It will next be used in the code for one digit numbers
           
    # What if number takes the form d0dd (Thousands + two digit remainder)
           elif string_form[1] == "0" and string_form[2] != "0":
               number = remainder
            # This makes the new number just the second to last and final digits (A0CD -> CD)   
               string_form = string_form[-2] + string_form[-1]
            # It will next be used in the code for two digit numbers
              
    # What if number takes the form dd0d (Thousands + three digit remainder with middle 0)
           elif string_form[1] != "0" and string_form[2] == "0":
               number = remainder
            # This makes the new number just the last three digits B0D of AB0D
               string_form = string_form[-3] + string_form[-2] + string_form[-1]
            # It will next be used in the code for three digit numbers (with middle zero)
               
    # If none of these cases are true, then it is a four digit number without zeroes in the first 3 places       
           else:
               number = remainder
            # This makes the new number just the last three digits BCD of ABCD   
               string_form = string_form[-3] + string_form[-2] + string_form[-1]
            # It will next be used in the code for three digit numbers   

        if len(string_form) == 3:
    # Four digit number starts with integer for the first position in the string form of the number
    # The leading digit is not a zero (d0dd or d00d) as these cases were handled at the four digit stage
           
           hundreds_place = int(string_form[0])
           
           if hundreds_place >= 1 and hundreds_place <= 3:
               second_place = "C" * hundreds_place
               # Same code as for M, MM, MMM for C, CC, CCC (100, 200, 300)
           elif hundreds_place == 4:
               second_place = "CD"
               # Special case for 400
           elif hundreds_place == 5: 
               # Special case for 500
               second_place = "D"
           elif hundreds_place >= 6 and hundreds_place <= 8:
               second_place = "D" + "C"*(hundreds_place - 5)    
               # For DC, DCC, DCCC (600, 700, 800)
           elif hundreds_place == 9:
               # Special case for 900
               second_place = "CM"
           
           remainder = number - hundreds_place*100
           
           if string_form[1] == 0:
               # This is when the middle digit of the three current digits is 0 
               number = remainder
               # This makes the new number just the final digit D of B0D
               string_form = str(string_form[-1])
               # It will next be used in the code for one digit numbers
               
           elif string_form[1] != 0:
               # This is when the middle digit of the three current digits is nonzero
               number = remainder
               # This makes the new number just the final two digits CD of BCD
               string_form = string_form[-2] + string_form[-1]
               # It will next be used in the code for two digit numbers
              
        if len(string_form) == 2:
            tens_place = int(string_form[-2])
            if tens_place >= 1 and tens_place <= 3:
                second_to_last = "X" * tens_place
                # X, XX, XXX for 10, 20, 30
            elif tens_place == 4:
                second_to_last = "XL"
                # Special case for 40
            elif tens_place == 5: 
                second_to_last = "L"
                # Special case for 50
            elif tens_place >= 6 and tens_place <= 8:
                second_to_last = "L" + "X"*(tens_place - 5)
                # For LX, LXX, LXXX (60, 70, 80)
            elif tens_place == 9:
                second_to_last = "XC"
                # Special case for 90
            remainder = number - tens_place*10
    # Remove the tens place associated value to be left with a single digit remainder
            number = remainder
                # Take final digit of the two digit string 
            string_form = str(string_form[-1])

        if len(string_form) == 1:
            if number >= 1 and number <= 3:
                last_place = "I" * number
            elif number == 4:
                last_place = "IV"
            elif number == 5: 
                last_place = "V"
            elif number >= 6 and number <= 8:
                last_place = "V" + "I"*(number - 5)
            elif number == 9:
                last_place = "IX"
          # If none of these cases are true, the final digit is a zero
            else:
                last_place = ""
    # If any of these are empty strings, they don't appear in the final result 
    # Input is 1 through 3999 (Roman numeral form) so zero itself is not considered            
        complete_number = first_place + second_place + second_to_last + last_place
                
        return(complete_number)
