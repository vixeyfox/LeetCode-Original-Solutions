# -*- coding: utf-8 -*-
"""
Created on Wed Oct 12 12:03:43 2022

@author: vixey foxwish
"""
# Sums of Powers of 3 # Solved 10/12/2022
# 1780. Medium. Check if Number is a Sum of Powers of Three

# Runtime 28ms better than 97.20% of python3 submissions
# Memory usage beats 17.45% of python3 submissions
# =============================================================================
# Given an integer n, return true if it is possible to represent n as the sum of 
# distinct powers of three. Otherwise, return false.
# 
# An integer y is a power of three if there exists an integer x such that y == 3**x.
# Example 1:
# 
# Input: n = 12
# Output: true
# Explanation: 12 = 3**1 + 3**2
# Example 2:
# 
# Input: n = 91
# Output: true
# Explanation: 91 = 3**0 + 3**2 + 3**4
# Example 3:
# 
# Input: n = 21
# Output: false
#  
# Constraints:
# 
# 1 <= n <= 10**7
# =============================================================================

class Solution:
    def checkPowersOfThree(self, n: int) -> bool:
        n_trinary = ''
        # convert to base 3 (trinary), should be nothing but 0s and 1s
        # e.g. 12 is 110 in trinary as 3**2 + 3**1, 91 is 10101 in trinary as 3**4 + 3**2 + 3**0
        for exponent in range(17): # max power of 3 to be used is 3**16
            if n // 3**exponent == 0: # have reached the beginning of the representation of n in trinary
                break # time to exit loop so as to not have wasted leading zeroes
         # Check if the next digit in the trinary representation of n is 0, 1, or 2:
            elif n % (3**(exponent + 1)) == 0: # this is a 0 in the trinary form of n 
                n_trinary = "0" + n_trinary   
            elif n % (3**(exponent + 1)) == 3**exponent:  # n % 3 == 1, n % 9 == 3, this finds a 1 in the trinary form of n
                n_trinary = "1" + n_trinary
                n -= 3**exponent
            else: # if there is a 2 in the trinary form of n, it is not a sum of powers of 3
                return False
        # it only gets this far if n in trinary is entirely 0s and 1s        
        return True
