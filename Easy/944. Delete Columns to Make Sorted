# -*- coding: utf-8 -*-
"""
Created on Sat Feb 18 09:48:06 2023

@author: vixey foxwish
"""
# Solved 2/18/2023
# Runtime 172 ms Beats 77.71%
# Memory 14.5 MB Beats 91.90%

# =============================================================================
# 944. Delete Columns to Make Sorted
# You are given an array of n strings strs, all of the same length.
# The strings can be arranged such that there is one on each line, making a grid.

# For example, strs = ["abc", "bce", "cae"] can be arranged as follows:
# abc
# bce
# cae
# You want to delete the columns that are not sorted lexicographically.
#  In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are
#  sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.
# Return the number of columns that you will delete.
# 
# Example 1:
# Input: strs = ["cba","daf","ghi"]
# Output: 1
# Explanation: The grid looks as follows:
#   cba
#   daf
#   ghi
# Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.
# 
# Example 2:
# Input: strs = ["a","b"]
# Output: 0
# Explanation: The grid looks as follows:
#   a
#   b
# Column 0 is the only column and is sorted, so you will not delete any columns.
# 
# Example 3:
# Input: strs = ["zyx","wvu","tsr"]
# Output: 3
# Explanation: The grid looks as follows:
#   zyx
#   wvu
#   tsr
# All 3 columns are not sorted, so you will delete all 3.
# Constraints:
# 
# n == strs.length
# 1 <= n <= 100
# 1 <= strs[i].length <= 1000
# strs[i] consists of lowercase English letters.
# =============================================================================
strs = ["abc", "bce", "cae"] # gives 1 as it should
strs = ["cba","daf","ghi"] # gives 1 as it should
strs = ["a","b"] # gives 0 as it should
strs = ["zyx","wvu","tsr"] # gives 3 as it should

# Pseudocode implementation
# need 2 for loops. outer loop iterates through columns (positions in each str)
# inner for loop iterates down the columns (through str in strs)
# if s[0][0] < s[1][0] < s[2][0] (first column all good, continue)
# else (when they're not ordered, columns to be deleted gets += 1)

class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        bad_columns = 0
        
        for column in range(len(strs[0])):
            # iterates through the columns, through the length of any one string
            for row in range(len(strs)):
                # iterates through the rows, through the number of strings that there are
                if row > 0:
                    # comparing adjacent rows in same column to check ordering
                    previous = strs[row-1][column]
                    current = strs[row][column]
                    if previous <= current:
                        # they seem to be ordered so far
                        # skip ahead to next row
                        continue
                    else:
                        # there is something in this column out of order, so break 
                        # skips ahead to next column
                        bad_columns += 1
                        break
        return bad_columns
        
