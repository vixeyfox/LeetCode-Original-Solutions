# -*- coding: utf-8 -*-
"""
Created on Sat Nov 12 11:46:43 2022

@author: vixey foxwish
"""

# LeetCode 202 Happy Number (Easy)
# Solved 11/12/2022
# Runtime: 39 ms, faster than 89.99% of Python3 online submissions for Happy Number.
# Memory Usage: 13.8 MB, less than 61.64% of Python3 online submissions for Happy Number.

# =============================================================================
# Write an algorithm to determine if a number n is happy.
# 
# A happy number is a number defined by the following process:
# 
# Starting with any positive integer, replace the number by the sum of the squares of its digits.
# Repeat the process until the number equals 1 (where it will stay), or it loops
# endlessly in a cycle which does not include 1.
# Those numbers for which this process ends in 1 are happy.
# Return true if n is a happy number, and false if not.
# 
#  
# 
# Example 1:
# 
# Input: n = 19
# Output: true
# Explanation:
# 1**2 + 9**2 = 82
# 8**2 + 2**2 = 68
# 6**2 + 8**2 = 100
# 1**2 + 0**2 + 0**2 = 1
# Example 2:
# 
# Input: n = 2
# Output: false
#  
# 
# Constraints:
# 
# 1 <= n <= 2**31 - 1
# =============================================================================
class Solution:
    def isHappy(self, n: int) -> bool:
# testing 1-100 with for loop and range showed only these numbers show up eventually
# as the unique non-terminating loop in cases where n is not happy
# each number in this set generates the next one (and 20->4) repeatedly
        infinite_loop = set([4, 16, 37, 58, 89, 145, 42, 20])
# the only numbers that can keep it going indefinitely without hitting one
        
        while n != 1: 
# n has not proven itself happy (able to get to 1) yet
            string_n = str(n)
            new_sum = 0
            for digit in string_n:
                
# square and sum up the digits of n in string form, go back to integers
                squared_digit = int(digit)**2
                new_sum += squared_digit
# use the sum of the squares of the digits as the new n, will exit loop if  n == 1 reached ever    
            n = new_sum
            if n in infinite_loop: 
# saves time and avoids non-terminating program
                return False
# only gets down to here if it could exit the infinite loop, meaning n was happy
        return True
        
