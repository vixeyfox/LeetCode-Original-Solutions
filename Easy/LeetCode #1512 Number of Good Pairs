# -*- coding: utf-8 -*-
"""
Created on Thu Dec 15 11:51:41 2022

@author: vixey foxwish
"""
# Solved 12/15/2022
# Runtime 49ms Beats 73.32%
# Memory 13.8 MB Beats 96.73%


# 1512. Number of Good Pairs
# Given an array of integers nums, return the number of good pairs.
# A pair (i, j) is called good if nums[i] == nums[j] and i < j.

# Example 1:

# Input: nums = [1,2,3,1,1,3]
# Output: 4
# Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
# Example 2:

# Input: nums = [1,1,1,1]
# Output: 6
# Explanation: Each pair in the array are good.
# Example 3:

# Input: nums = [1,2,3]
# Output: 0
 
# Constraints:
# 1 <= nums.length <= 100
# 1 <= nums[i] <= 100

# ============================================================================

# Use two for loops running through the whole array to get all i,j combos
    # use bool equal_value to test for condition nums[i] == nums[j]
    # use bool lesser i than j to test for condition i > j
    # if both bools are true, then add 1 to the count of good pairs
# at the end, return the number of good pairs

nums = [1,2,3]
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:    
    # Use two for loops running through the whole array to get all i,j combos
        good_pairs = 0
        for index_i in range(len(nums)):
            for index_j in range(len(nums)):
                
            # use bool equal_value to test for condition nums[i] == nums[j]
                equal_value = nums[index_i] == nums[index_j]
                
            # use bool lesser i than j to test for condition i > j
                i_less_than_j = index_i < index_j
                
            # if both bools are true
                if equal_value and i_less_than_j:
                # add 1 to the count of good pairs
                    good_pairs += 1
                    
        # at the end, return the number of good pairs
        return good_pairs
        # print(good_pairs)
