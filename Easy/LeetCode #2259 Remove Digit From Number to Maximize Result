# -*- coding: utf-8 -*-
"""
Created on Sat Dec 17 12:01:40 2022

@author: vixey foxwish
"""
# Solved 12/17/2022
# Runtime 32 ms Beats 93.93%
# Memory 13.9 MB Beats 66.60%

# =============================================================================
# 2259. Remove Digit From Number to Maximize Result
# 
# You are given a string number representing a positive integer and a character digit.
# Return the resulting string after removing exactly one occurrence of digit from 
# number such that the value of the resulting string in decimal form is maximized. 
# The test cases are generated such that digit occurs at least once in number.
# 
# Example 1:
# 
# Input: number = "123", digit = "3"
# Output: "12"
# Explanation: There is only one '3' in "123". After removing '3', the result is "12".
# Example 2:
# 
# Input: number = "1231", digit = "1"
# Output: "231"
# Explanation: We can remove the first '1' to get "231" or remove the second '1' to get "123".
# Since 231 > 123, we return "231".
# Example 3:
# 
# Input: number = "551", digit = "5"
# Output: "51"
# Explanation: We can remove either the first or second '5' from "551".
# Both result in the string "51".
# 
# Constraints:
# 
# 2 <= number.length <= 100
# number consists of digits from '1' to '9'.
# digit is a digit from '1' to '9'.
# digit occurs at least once in number.
# =============================================================================
number = '1231'
digit = '1'
class Solution:
    def removeDigit(self, number: str, digit: str) -> str:
# Iterate through the string number, checking what happens from removing each digit
        possible_answers = set()
        for index in range(len(number)):
# only check what happens when digit removed if it is the right digit
            if number[index] == digit:
# to get the string number with the digit at that index removed, consider three cases
        # case 1: it's the first digit, index 0
                if index == 0:
                    number_without_digit = number[1:len(number)]
        # case 2: it's the last digit, index len(number) - 1
                elif index == len(number) -1 :
                    number_without_digit = number[0:len(number)-1]
        # case 3: it's index 1 to ... len(number) -2 (all else cases are this situation)
                else:
        # e.g. for indices 01234 to remove index 2 and get 0134, you need 0:2 + 3:5
                    number_without_digit = number[0:index] + number[index+1:len(number)]
# for each position in the string number, get the integer value when that digit is gone      
                this_new_value = int(number_without_digit)
# since duplicates can be disregarded as ties, use a set
# add that integer value to the set of candidate values after a digit is removed
                possible_answers.add(this_new_value)    
# get the minimum of the set of the possible candidate values resulting from removing a digit
        answer = max(possible_answers)
        # return the answer
        string_ans = str(answer)
        return string_ans
