# -*- coding: utf-8 -*-
"""
Created on Mon Oct 10 10:12:48 2022

@author: vixey foxwish
"""
# Leetcode 1672. Richest Customer Wealth Solved 10/10/2022
# Runtime: 77 ms, faster than 72.87% of Python3 online submissions for Richest Customer Wealth.
# Memory Usage: 13.8 MB, less than 74.20% of Python3 online submissions for Richest Customer Wealth.

# =============================================================================
# You are given an m x n integer grid accounts where accounts[i][j] is the amount 
# of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.
# 
# A customer's wealth is the amount of money they have in all their bank accounts. 
# The richest customer is the customer that has the maximum wealth.
# 
# Example 1:
# Input: accounts = [[1,2,3],[3,2,1]]
# Output: 6
# Explanation:
# 1st customer has wealth = 1 + 2 + 3 = 6
# 2nd customer has wealth = 3 + 2 + 1 = 6
# Both customers are considered the richest with a wealth of 6 each, so return 6.
# Example 2:
# 
# Input: accounts = [[1,5],[7,3],[3,5]]
# Output: 10
# Explanation: 
# 1st customer has wealth = 6
# 2nd customer has wealth = 10 
# 3rd customer has wealth = 8
# The 2nd customer is the richest with a wealth of 10.
# Example 3:
# 
# Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
# Output: 17
# 
# Constraints:
# 
# m == accounts.length
# n == accounts[i].length
# 1 <= m, n <= 50
# 1 <= accounts[i][j] <= 100
# =============================================================================
accounts = [[2,8,7],[7,1,3],[1,9,5]]
class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        rich_list = [0]                       # can't take max() of an empty list so start with zero as maximum (assume balances > 0)
        for customer in range(len(accounts)): # iterate through the total set of customers
            customer_wealth = 0               # start this variable anew at zero for each customer
            
            for bank in range(len(accounts[customer])):     # iterate through the bank accounts of each customer
                customer_wealth += accounts[customer][bank] # add up the individual bank values per this customer
          
            if customer_wealth > max(rich_list):  # we only care if the customer sets a new record for max wealth > previous record
                rich_list.append(customer_wealth) # build list of potential record holders
                
        return(max(rich_list)) # the highest wealth of any customer is the sought answer
