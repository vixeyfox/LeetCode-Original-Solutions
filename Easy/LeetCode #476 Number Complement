# -*- coding: utf-8 -*-
"""
Created on Mon Dec 12 16:10:27 2022

@author:  vixey foxwish
"""
# Solved 12/12/2022

# Runtime 27 ms Beats 96.83%
# Memory 13.8 MB Beats 55.23%

# =============================================================================
# 476. Number Complement
# 
# The complement of an integer is the integer you get when you flip all the 0's
#  to 1's and all the 1's to 0's in its binary representation.
# 
# For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.
# Given an integer num, return its complement.
# 
# Example 1:
# 
# Input: num = 5
# Output: 2
# 
# Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
# Example 2:
# 
# Input: num = 1
# Output: 0
# Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
#  
# 
# Constraints:
# 
# 1 <= num < 2**31
# =============================================================================
class Solution:
    def findComplement(self, num: int) -> int:
        # first, find the largest power of 2 needed to represent num in binary as the leading nonzero digit
        # the largest possible value is 2**30 since num is < 2**31
        # in which case if num is maximally 2**31 - 1 then 2**30 is the largest part of its binary form
        # and then (2**31 - 1) // 2 is just below 2**30
        
        num = 5
        for power_of_2 in range(0,31):
            if 2**power_of_2 > num // 2:
        # this means 2**power_of_2 is the largest number used in the summation of the binary form of num
        # for num = 7, binary is 111 (2**2 + 2**1 + 2**0) and power_of_2 is 2
        # for num = 8, binary is 1000 (2**3) and power_of_2 is 3
                largest_power = power_of_2
        # we don't need to test the higher powers of 2 beyond this largest value leading 1 in the binary form of num
                break
        # now build the binary form of n, using leftover for the quantity not yet represented in binary
        leftover = num
        binary_num = ''
        # build the binary form of n from right to left, where adding 1 to the left means 1,2,4,8, ...
        for power in range(0, largest_power+1):
            # See example of 19 which is 10011
            # Power = 0 then 19%2 == 1 and add a trailing 1 and get 18 left over
            # Power = 1 then 18%4 == 2 and add a trailing 1 and get 16 left over 
            # Power = 2 then 16%8 != 4 and add a trailing 0
            # Power = 3 then 16%16 != 8 and add a trailing 0
            # Power = 4 then 16%32 == 16 and add a final 1 to the front and 0 left over
            #(also power = 4 is the final range value tested for range(0,5) )
            if leftover % (2**(power+1)) == (2**power):
                binary_num = "1" + binary_num
                leftover -= 2**power
            else: 
                binary_num = "0" + binary_num
                
        # print(num, 'in binary is', binary_num)
        # now we have binary_num, the binary form of num
        # we want the complement
        complement_num = ''
        # build the complement of binary form of num by changing 0 to 1 and vice versa
        for digit_a in binary_num:
            if digit_a == str(0):
                complement_num += '1'
            elif digit_a == str(1):
                complement_num += '0'
        position = 0
        value = 0
        # now get the integer (base 10) value of the complement of num
        for digit_b in complement_num:
            position += 1
            if digit_b == str(1):
                # work from left to right, as the power of 2 (power_b) declines as position increases
                power_b = len(complement_num) - position
                value += 2**power_b
        return value

    
