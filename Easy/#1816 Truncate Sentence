# -*- coding: utf-8 -*-
"""
Created on Wed Jan 11 15:04:23 2023

@author: vixey foxwish
"""
# Solved 1/11/2013
# Runtime 31 ms Beats 84.38%
# Memory 13.7 MB Beats 97.85%


# =============================================================================
# 
# 1816. Truncate Sentence
# A sentence is a list of words that are separated by a single space with no 
# leading or trailing spaces. Each of the words consists of only uppercase and 
# lowercase English letters (no punctuation).
# For example, "Hello World", "HELLO", and "hello world hello world" are all sentences.
# You are given a sentence s​​​​​​ and an integer k​​​​​​. You want to truncate s​​​​​​ such that
# it contains only the first k​​​​​​ words. Return s​​​​​​ after truncating it.
# 
# Example 1:
# 
# Input: s = "Hello how are you Contestant", k = 4
# Output: "Hello how are you"
# Explanation:
# The words in s are ["Hello", "how" "are", "you", "Contestant"].
# The first 4 words are ["Hello", "how", "are", "you"].
# Hence, you should return "Hello how are you".
# Example 2:
# 
# Input: s = "What is the solution to this problem", k = 4
# Output: "What is the solution"
# Explanation:
# The words in s are ["What", "is" "the", "solution", "to", "this", "problem"].
# The first 4 words are ["What", "is", "the", "solution"].
# Hence, you should return "What is the solution".
# Example 3:
# 
# Input: s = "chopper is not a tanuki", k = 5
# Output: "chopper is not a tanuki"
#  
# 
# Constraints:
# 
# 1 <= s.length <= 500
# k is in the range [1, the number of words in s].
# s consist of only lowercase and uppercase English letters and spaces.
# The words in s are separated by a single space.
# There are no leading or trailing spaces.
# =============================================================================

# Pseudocode Implementation
# use split method to separate by spaces since all words are separated by only
# a single space, and there is no punctuation, nor leading/trailing spaces

# record the output of the split method as a list 

# use k to know how to take the 0, 1, ..., k-1 indices of the list (first k)

# for all words except the last word (indices 0, 1, ... k-2)
# append to an empty string (to begin with) the "word " (plus a space after it)
# for word k-1 (the last of the k words) only add the word and no terminal " "

s = "Hello how are you Contestant"
s = "What is the solution to this problem"
k = 4

s = "chopper is not a tanuki"
k = 5

class Solution:
    def truncateSentence(self, s: str, k: int) -> str:
        # the type of words is a list, and it stores the split up words of s
        words = s.split(' ')
        # initialize empty string to build up answer via concatenation
        answer = ''
        for word_number in range(k):
        # range(k) is 0, 1, 2, ..., k-1 so we can do if else without elif == k-1 test
            if word_number < k - 1:
                # for all words except the last one
                answer += words[word_number]
                # the list of words doesn't store a space along with each word
                answer += ' '
                # space comes after every word except the last word at index = k-1
            else:
            # for the final word where word_number = k-1
                answer += words[k-1]
                # no space is needed as a final trailing space
        return answer


# print(answer)

        
        








