# -*- coding: utf-8 -*-
"""
Created on Sun Jan  8 10:08:08 2023

@author: vixey foxwish
"""
# Solved 1/8/2023
# Runtime 84 ms Beats 92.69%
# Memory 13.8 MB Beats 94.90%

# =============================================================================
# 2057. Smallest Index With Equal Value
# Given a 0-indexed integer array nums, return the smallest index i of nums such 
# that i mod 10 == nums[i], or -1 if such index does not exist.
# x mod y denotes the remainder when x is divided by y.
# 
# 
# Example 1:
#     
# Input: nums = [0,1,2]
# Output: 0
# Explanation: 
# i=0: 0 mod 10 = 0 == nums[0].
# i=1: 1 mod 10 = 1 == nums[1].
# i=2: 2 mod 10 = 2 == nums[2].
# All indices have i mod 10 == nums[i], so we return the smallest index 0.
# 
# Example 2:
#     
# Input: nums = [4,3,2,1]
# Output: 2
# Explanation: 
# i=0: 0 mod 10 = 0 != nums[0].
# i=1: 1 mod 10 = 1 != nums[1].
# i=2: 2 mod 10 = 2 == nums[2].
# i=3: 3 mod 10 = 3 != nums[3].
# 2 is the only index which has i mod 10 == nums[i].
# 
# Example 3:
# 
# Input: nums = [1,2,3,4,5,6,7,8,9,0]
# Output: -1
# Explanation: No index satisfies i mod 10 == nums[i].
#  
# Constraints:
# 
# 1 <= nums.length <= 100
# 0 <= nums[i] <= 9
# =============================================================================

nums = [0,1,2]
nums = [4,3,2,1]

# Pseudocode Implementation
# since we want the smallest index i, iterate through nums with a for loop
# from 0 going up by 1 at a time using a range
# as soon as you get a working value i where i mod 10 == nums[i]
    # return that answer
# else... if you get to the end without ever finding it, return -1

class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        for index in range(len(nums)):
# iterate through the full length of nums with indices 0 to len(nums)-1
            if index % 10 == nums[index]:
    # if the last digit of the index is the same as the value at that position
                return index
# if the code gets down to here, the for loop has finished without finding index
        return -1
