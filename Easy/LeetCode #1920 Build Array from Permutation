# -*- coding: utf-8 -*-
"""
Created on Fri Oct  7 12:48:51 2022

@author: vixey foxwish
"""
# Leetcode 1920. (Easy) Build Array from Permutation (Easy) Solved 10/7/2022
# Runtime 133ms (faster than 87.17% of python3 submissions 
# Memory Usage 14.1MB (beats 44.66% of python3 submissions)

# =============================================================================
# Given a zero-based permutation nums (0-indexed), build an array ans of the 
# same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
# A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
#
# Example 1:
# 
# Input: nums = [0,2,1,5,3,4]
# Output: [0,1,2,4,5,3]
# Explanation: The array ans is built as follows: 
# ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
#     = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
#     = [0,1,2,4,5,3]
# Example 2:
# 
# Input: nums = [5,0,1,2,3,4]
# Output: [4,5,0,1,2,3]
# Explanation: The array ans is built as follows:
# ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
#     = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
#     = [4,5,0,1,2,3]
# 
# Constraints:
# 
# 1 <= nums.length <= 1000
# 0 <= nums[i] < nums.length
# The elements in nums are distinct.
# =============================================================================

# Note that lists are mutable and changes made to a list will be visible to other times when a list is called
# It is best to assign values via indexing to new lists as needed
# Calling nums[nums[index]] can be done through making new lists for both of the levels of indexing as follows

class Solution:
    def buildArray(self, nums: List[int]) -> List[int]:
        first_level = [0]*len(nums) # make a new array of 0s with the proper length to store the first level indexing
        second_level = [0]*len(nums) # make a second array of 0s with the proper length to store second level indexing
        for index in range(len(nums)): # for loop to iterate throughout nums
            first_level[index] = nums[index] # first level records the values found at that index
            second_level[index] = nums[first_level[index]] # second level calls upon first level values to find the next index
        return second_level # this is the requested output of nums[nums[index]] being stored correctly without changing nums
