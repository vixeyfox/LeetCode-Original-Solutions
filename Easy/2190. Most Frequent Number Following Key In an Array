# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 10:15:08 2023

@author: vixey foxwish
"""
# Solved 1/20/2023
# Runtime 90 ms Beats 66.85%
# Memory 14.1 MB Beats 88.14%
# using list

# alternately using set to store indices without ordering
# Runtime 88 ms Beats 74.93%
# Memory 14.2 MB Beats 35.85%


# =============================================================================
# 
# 2190. Most Frequent Number Following Key In an Array
# 
# You are given a 0-indexed integer array nums. You are also given an integer key, 
# which is present in nums.
# 
# For every unique integer target in nums, count the number of times target
# immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:
# 
# 0 <= i <= nums.length - 2,
# nums[i] == key and,
# nums[i + 1] == target.
# Return the target with the maximum count. The test cases will be generated such
# that the target with maximum count is unique.
# 
# Example 1:
# 
# Input: nums = [1,100,200,1,100], key = 1
# Output: 100
# Explanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.
# No other integers follow an occurrence of key, so we return 100.
# Example 2:
# 
# Input: nums = [2,2,2,2,3], key = 2
# Output: 2
# Explanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.
# For target = 3, there is only one occurrence at index 4 which follows an occurrence of key.
# target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.
#  
# Constraints:
# 2 <= nums.length <= 1000
# 1 <= nums[i] <= 1000
# The test cases will be generated such that the answer is unique.
# =============================================================================
nums = [1,100,200,1,100]
key = 1

nums = [2,2,2,2,3]
key = 2

class Solution:
    def mostFrequent(self, nums: List[int], key: int) -> int:
        # find list of all the indices where key occurs in the array (except final=key is irrelevant)
        # record each number that follows an index right after key
        # make a frequency dictionary of the numbers following after key, how many of them
        # find the max value of this frequency dictionary
        # use key, value pairs in dict.items() if value = max value, return this best target
        
        where_is_key = []
        # where does the key show up; ignore if it's at the final position of nums
        for index in range(len(nums)-1):
            # iterate through the array
            if nums[index] == key:
                # build a list of indices where the key appears
                where_is_key.append(index)
                
        targets_dict = dict()
        # frequency dictionary of how often the targets show up
        for key_index in where_is_key:
            target = nums[key_index + 1]      
            if target in targets_dict.keys():
                # if the target has been seen before
                targets_dict[target] += 1
            else:
                # target has not been seen before
                targets_dict[target] = 1
        
        # find the max value of the frequency dictionary, the target appearing most often
        best_target_frequency = max(targets_dict.values())
        # now find the dictionary-key (target value) that occurs at that best frequency
        for target, frequency in targets_dict.items():
            # which target has the best frequency (highest value)
            if frequency == best_target_frequency:
                # return it when found (problem tells this will be unique)
                return target
                
        
        
        
