# =============================================================================
# # 347. Top K Frequent Elements (Medium) SOLVED 10/26/2022

# Runtime: 288 ms, faster than 13.53% of Python3 online submissions for Top K Frequent Elements.
# Memory Usage: 18.5 MB, less than 98.85% of Python3 online submissions for Top K Frequent Elements.

# Given an integer array nums and an integer k, return the k most frequent elements. 
# You may return the answer in any order.
# 
#  
# Example 1:
# 
# Input: nums = [1,1,1,2,2,3], k = 2
# Output: [1,2]
# Example 2:
# 
# Input: nums = [1], k = 1
# Output: [1]
#  
# 
# Constraints:
# 
# 1 <= nums.length <= 10**5
# -10**4 <= nums[i] <= 10**4
# k is in the range [1, the number of unique elements in the array].
# It is guaranteed that the answer is unique.
#  
# =============================================================================

# nums = [1,1,1,2,2,3] # for testing
# k = 2 # it wants to know the 2 most common elements # for testing 
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        length = len(nums) # total number of values in the array
        
        frequency_dict = dict() # dictionary with keys of numbers and values of how often they showed up
        
        for position in range(length):
            if nums[position] not in frequency_dict: # if the number has not been seen yet
                frequency_dict[nums[position]] = 1 # now it has been seen once
            else: # number has already been seen and is in frequency_dict
                frequency_dict[nums[position]] += 1 # now it has been seen one more time
        
        list_of_frequencies = sorted(frequency_dict.values()) # sort the frequencies (ascending)
        most_common_first = list_of_frequencies[::-1] # reverse this list of frequencies (descending)
# now there is a list, named most_common_first, that starts with the most common 
# frequencies at which numbers occurred in the array nums
        most_common_values = set() # set of the k most common values in nums
        
        for frequency in range(k): # this iterates through k times, 0,1,...,k-1 
# now we want to know the k most frequent elements, which can be returned in any order (use a set)
        
            for integer, how_often in frequency_dict.items(): # iterate through dictionary 
# in this dictionary, integers are keys and how_often is how often they occurred (value)
# most_common_first stores the frequencies - starting with the frequencies of numbers occurring most often
                if how_often == most_common_first[frequency]: # if it occurred at one of the k most common frequencies
                    most_common_values.add(integer)
        if k == len(most_common_values): # error checking, useful for troubleshooting
            return most_common_values
