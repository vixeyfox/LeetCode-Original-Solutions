# -*- coding: utf-8 -*-
"""
Created on Fri Oct 21 15:44:47 2022

@author: vixey foxwish
"""
# =============================================================================
# LeetCode 1198. Find Smallest Common Element in All Rows | Medium Difficulty
# Solved 10/21/2022
# Runtime: 1373 ms, faster than 27.70% of Python3 online submissions for Find Smallest Common Element in All Rows.
# Memory Usage: 39.1 MB, less than 18.28% of Python3 online submissions for Find Smallest Common Element in All Rows.
# 
# Given an m x n matrix mat where every row is sorted in strictly increasing order, 
# return the smallest common element in all rows.
# 
# If there is no common element, return -1.
# 
# Example 1:
# 
# Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]
# Output: 5
# Example 2:
# 
# Input: mat = [[1,2,3],[2,3,4],[2,3,5]]
# Output: 2
#  
# 
# Constraints:
# 
# m == mat.length
# n == mat[i].length
# 1 <= m, n <= 500
# 1 <= mat[i][j] <= 10**4
# mat[i] is sorted in strictly increasing order.
# =============================================================================

# mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]] Test Case 1, yields 5 (correct)
# mat = [[1,2,3],[2,3,4],[2,3,5]] Test Case 2, yields 2 (correct)

class Solution:
    def smallestCommonElement(self, mat: List[List[int]]) -> int:
        found_in_how_many_rows = dict() # initialize empty dictionary for keys (number) and values (found in how many rows)
        found_in_all_rows = set() # set of numbers found in all rows, but we only care about the smallest one overall
        
        for row_index in range(len(mat)): # the elements of the main list are rows
            for column_index in range(len(mat[row_index])): # the elements of the inner list (row) are columns of said row
                if mat[row_index][column_index] not in found_in_how_many_rows.keys(): # number 1st appearance
                    found_in_how_many_rows[mat[row_index][column_index]] = 1
                else: # it was already in at least one row, counted already
                    found_in_how_many_rows[mat[row_index][column_index]] += 1
        
        local_min = 10**4 # this is the highest number allowed anyway
        for number, frequency in found_in_how_many_rows.items():
            if frequency == len(mat): # it appeared at least once in every row
            # so its frequency == number of rows
                if number <= local_min: # if smaller than / equal to the local minimum found so far (only smallest counts)
                    found_in_all_rows.add(number) # so add it to set of numbers found in all rows
                
        if len(found_in_all_rows) == 0: # there was no number found in all rows
            return -1
        else: # if there was at least one number that was found in all rows
            return min(found_in_all_rows)
